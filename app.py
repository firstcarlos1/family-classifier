from flask import Flask, render_template, request, jsonify
import os

app = Flask(__name__)

# Family classification logic
def classify_family_member(age, gender, relationship_to_you):
    """
    Classify family member based on age, gender, and relationship
    """
    classifications = []
    
    # Age-based classification
    if age < 18:
        classifications.append("‡πÄ‡∏î‡πá‡∏Å/‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô")
    elif age < 60:
        classifications.append("‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà")
    else:
        classifications.append("‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏")
    
    # Relationship-based classification
    if relationship_to_you in ["‡∏û‡πà‡∏≠", "‡πÅ‡∏°‡πà"]:
        classifications.append("‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á")
    elif relationship_to_you in ["‡∏•‡∏π‡∏Å‡∏ä‡∏≤‡∏¢", "‡∏•‡∏π‡∏Å‡∏™‡∏≤‡∏ß"]:
        classifications.append("‡∏ö‡∏∏‡∏ï‡∏£")
    elif relationship_to_you in ["‡∏û‡∏µ‡πà‡∏ä‡∏≤‡∏¢", "‡∏û‡∏µ‡πà‡∏™‡∏≤‡∏ß", "‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏≤‡∏¢", "‡∏ô‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏ß"]:
        classifications.append("‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á")
    elif relationship_to_you in ["‡∏õ‡∏π‡πà", "‡∏¢‡πà‡∏≤", "‡∏ï‡∏≤", "‡∏¢‡∏≤‡∏¢"]:
        classifications.append("‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß")
    
    # Gender-based classification
    if gender == "‡∏ä‡∏≤‡∏¢":
        classifications.append("‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢")
    else:
        classifications.append("‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏û‡∏®‡∏´‡∏ç‡∏¥‡∏á")
    
    return classifications

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/classify', methods=['POST'])
def classify():
    try:
        data = request.get_json()
        
        name = data.get('name', '')
        age = int(data.get('age', 0))
        gender = data.get('gender', '')
        relationship = data.get('relationship', '')
        
        # Validate input
        if not all([name, age, gender, relationship]):
            return jsonify({
                'success': False,
                'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
            })
        
        if age < 0 or age > 150:
            return jsonify({
                'success': False,
                'error': '‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            })
        
        # Classify family member
        classifications = classify_family_member(age, gender, relationship)
        
        return jsonify({
            'success': True,
            'name': name,
            'age': age,
            'gender': gender,
            'relationship': relationship,
            'classifications': classifications
        })
        
    except ValueError:
        return jsonify({
            'success': False,
            'error': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'
        })

@app.route('/health')
def health():
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    # For Render deployment
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Starting Family Classifier on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)