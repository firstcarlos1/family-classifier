from flask import Flask, render_template, request, jsonify
import os

app = Flask(__name__)

def classify_family_type(members):
    """
    ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    spouses = [m for m in members if m['relation'] in ['husband', 'wife']]
    children = [m for m in members if m['relation'] in ['son', 'daughter']]
    parents = [m for m in members if m['relation'] in ['father', 'mother']]
    grandparents = [m for m in members if m['relation'] in ['grandfather', 'grandmother', 'grandfather-maternal', 'grandmother-maternal']]
    grandchildren = [m for m in members if m['relation'] in ['grandson', 'granddaughter']]
    siblings = [m for m in members if m['relation'] in ['older-brother', 'older-sister', 'younger-brother', 'younger-sister']]
    uncles_aunts = [m for m in members if m['relation'] in ['uncle', 'aunt', 'uncle-maternal', 'aunt-maternal']]
    relatives = [m for m in members if m['relation'] in ['relative']]
    
    # ‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÄ‡∏î‡∏¥‡∏°
    has_stepchildren = any(m.get('has_stepchild', False) for m in members)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏
    all_ages = [m['age'] for m in members]
    spouse_ages = [m['age'] for m in spouses]
    
    # 1. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô
    if spouses and all(age < 20 for age in spouse_ages):
        if not children or all(m['age'] < 20 for m in children):
            return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô"
    
    # 2. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ú‡∏™‡∏°
    if has_stepchildren:
        return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ú‡∏™‡∏°"
    
    # 3. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
    if len(spouses) == 1 and children and any(m['age'] < 20 for m in children):
        return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"
    
    # 4. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô (‡∏õ‡∏π‡πà‡∏¢‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏ô)
    if grandparents and grandchildren and not spouses and not parents:
        return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô"
    
    # 5. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
    if all(age > 60 for age in all_ages):
        return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏"
    
    # 6. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å‡πÄ‡∏û‡∏®‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    if len(spouses) == 2:
        spouse_genders = [m['gender'] for m in spouses]
        if spouse_genders[0] == spouse_genders[1]:
            return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å‡πÄ‡∏û‡∏®‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô"
    
    # 7. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏¢‡∏≤‡∏¢
    if spouses and children and (parents or grandparents or siblings or uncles_aunts or relatives):
        return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏¢‡∏≤‡∏¢"
    
    # 8. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
    if spouses and children and not parents and not grandparents and not siblings and not uncles_aunts and not relatives:
        return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"
    
    # 9. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å)
    if spouses and not children:
        return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å"
    
    # 10. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á
    if siblings and not spouses and not parents:
        return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á"
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    return "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ"

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/classify', methods=['POST'])
def classify():
    try:
        data = request.get_json()
        members = data.get('members', [])
        
        if not members:
            return jsonify({
                'success': False,
                'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô'
            })
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        for member in members:
            if not all(key in member for key in ['relation', 'age', 'gender']):
                return jsonify({
                    'success': False,
                    'error': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
                })
            
            if member['age'] < 0 or member['age'] > 150:
                return jsonify({
                    'success': False,
                    'error': '‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
                })
        
        # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
        family_type = classify_family_type(members)
        
        return jsonify({
            'success': True,
            'family_type': family_type,
            'member_count': len(members)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'
        })

@app.route('/health')
def health():
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render deployment
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Starting Family Classifier on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
